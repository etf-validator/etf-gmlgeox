///////////////////////////////////////////////////////////////////////////////////////
//
// ETF-GmlGeoX
//
///////////////////////////////////////////////////////////////////////////////////////

buildscript {
	repositories {
		maven {
			url "https://services.interactive-instruments.de/etfdev-af/plugins-releases-local"
			credentials {
				// Our repository requires authenticating
				username 'ii-bda'
				password 'AP7mb4WA6F1ckdZkaE8Qx8GSowt'
			}}
	}
	dependencies {
		classpath group: 'de.interactive_instruments.bda', name: 'etf-bda', version: '[1.0.30,1.0.99]'
	}
	dependencies {
		ant.unjar src: configurations.classpath.files.find {it.path.contains('etf')}, dest: 'build/gradle'
	}
}
apply from: 'build/gradle/ii-bda.gradle'

///////////////////////////////////////////////////////////////////////////////////////

group = 'de.interactive_instruments.etf.bsxm'
description = "Basex XQuery module for validation and comparison of gml geometry data."


apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

ext.basexVersion = '8.6.7'
ext.deegreeVersion = '3.4.12'

repositories {
	maven {
		url "http://files.basex.org/maven"
	}
    maven {
        url "https://services.interactive-instruments.de/etfdev-af/ext-deegree-cache"
        credentials {
            username gradle.rootProject.ext.r_user
            password gradle.rootProject.ext.r_pwd
        }
    }
}

configurations {
  runtime.exclude group: "org.slf4j", module: "slf4j-nop"
}

dependencies {

    compile group: 'de.interactive_instruments', name: 'ii-commons-util', version: '3.0.0' + project.snapshotSuffix

	// Validator dependencies
	compile('org.bouncycastle:bcprov-jdk15on:1.57')
	compile('com.thoughtworks.xstream:xstream:1.4.10')

	compile('dom4j:dom4j:1.6.1') {
		exclude group: 'xml-apis'
	}

	compile('org.apache.santuario:xmlsec:2.0.8') {
		exclude group: 'org.slf4j'
	}

    // Overwrite
	compile group: 'org.codehaus.woodstox', name: 'woodstox-core-asl', version: '4.4.1'


	// Overwrite
	compile('org.locationtech.jts:jts-core:1.16.1')

	// Overwrite
	compile('org.apache.httpcomponents:httpclient:4.5.1') {
		exclude group: 'commons-logging'
	}

	// Overwrite
	compile('commons-io:commons-io:2.5')

	// Overwrite
	compile('org.jdom:jdom:2.0.2') {
		exclude group: 'xerces'
		exclude group: 'xalan'
	}

	// Overwrite
	compile('jaxen:jaxen:1.1.6') {
		exclude group: 'xerces'
		exclude group: 'xml-apis'
	}

	/*
    compile("org.deegree:deegree-core-cs:$deegreeVersion") {
        exclude group: 'org.postgis'
        exclude group: 'postgresql'
        exclude group: 'commons-logging'
        exclude group: 'log4j'
        exclude group: 'xerces'
    }
	*/

	compile("org.deegree:deegree-core-base:$deegreeVersion") {
		exclude group: 'org.slf4j'
		exclude group: 'xerces'
		exclude group: 'xml-apis'
		exclude group: 'com.h2database'
		exclude group: 'org.postgis'
		exclude group: 'postgresql'
		exclude group: 'commons-logging'
	}

	compile('com.github.davidmoten:rtree:0.8.0.2')

	compile('org.apache.commons:commons-jcs-core:2.1')
	compile 'com.github.ben-manes.caffeine:caffeine:2.5.2'

	compile group: 'org.slf4j', name: 'slf4j-api', version: etf_slf4jApiVersion

	compile group: 'xerces', name: 'xercesImpl', version: etf_xercesVersion

	compile group: 'xml-apis', name: 'xml-apis', version: etf_xmlApisVersion

	compile('xalan:xalan:2.7.2') {
		exclude group: 'xerces'
		exclude group: 'xml-apis'
	}

	compileOnly group: 'javax.xml.bind', name: 'jaxb-api', version:'2.2.12'

	compileOnly "org.basex:basex:$basexVersion"
	testCompile "org.basex:basex:$basexVersion"
	compileOnly "org.basex:basex-api:$basexVersion"
	testCompile "org.basex:basex-api:$basexVersion"

    testCompile group: 'net.sf.saxon', name: 'Saxon-HE', version: '9.7.0-4'
    testCompile group: 'junit', name: 'junit', version: etf_junitTestVersion
	testCompile group: 'ch.qos.logback', name: 'logback-classic', version: etf_logbackVersion
	testCompile "xmlunit:xmlunit:1.3"
}

sourceSets {
  test {
    resources {
      srcDir 'src/test/resources'
      srcDir 'src/main/resources'
    }
  }
}

def allLibs = configurations.runtime + configurations.compile -
		configurations.compile.filter { it.name.startsWith('basex') } -
		configurations.compile.filter { it.name.startsWith('jcl') } -
		configurations.compile.filter { it.name.startsWith('commons-fileupload') } -
		configurations.compile.filter { it.name.startsWith('xml-apis') } -
		configurations.compile.filter { it.name.startsWith('xmldb-api') } -
		configurations.compile.filter { it.name.startsWith('jaxb') } -
		configurations.compile.filter { it.name.startsWith('slf4j-log4j12') } -
		configurations.compile.filter { it.name.startsWith('milton') }

jar {
	doFirst {
		manifest {
			attributes(
					// Other manifest attributes are added by ii-bda
					'Main-Class': 'de.interactive_instruments.etf.bsxm.GmlGeoX',
			)
		}
	}
	into('lib') {
		from allLibs
	}
}

javadoc {
	destinationDir = file("$projectDir/docs/javadoc")
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	// archives javadocJar
}


def gmlGeoXInstallPath = System.getProperty("user.home")+
		File.separator + "BaseX" +
		File.separator + "BaseXRepo" +
        File.separator + group.replace(".", File.separator)

task copyGmlGeoXToRepo(dependsOn: jar) {
	doLast {
		copy {
			from jar
			into "$gmlGeoXInstallPath"
			rename '.*', 'GmlGeoX.jar'
		}
		println "Copied GmlGeoX to $gmlGeoXInstallPath"
	}
}

install {
	dependsOn = ["copyGmlGeoXToRepo"]
}